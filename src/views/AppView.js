// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.AppView = (function(superClass) {
  extend(AppView, superClass);

  function AppView() {
    return AppView.__super__.constructor.apply(this, arguments);
  }

  AppView.prototype.template = _.template('<div class="scoreRecord">Player: <%= scores["player"]%>  Dealer: <%= scores["dealer"]%>  Pushes: <%= scores["pushes"]%> </div> <div class="button-div"> <button class="hit-button">Hit</button> <button class="stand-button">Stand</button> </div> <div class="dealer-hand-container"></div> <div class="player-hand-container"></div>');

  AppView.prototype.events = {
    'click .hit-button': function() {
      return this.model.get('playerHand').hit();
    },
    'click .stand-button': function() {
      return this.model.get('playerHand').stand();
    }
  };

  AppView.prototype.initialize = function() {
    this.model.on('all', this.render, this);
    this.model.on('change:[playerHand]', this.render, this);
    return this.render();
  };

  AppView.prototype.render = function() {
    this.$el.children().detach();
    this.$el.html(this.template(this.model.attributes));
    this.$('.player-hand-container').html(new HandView({
      collection: this.model.get('playerHand')
    }).el);
    this.$('.dealer-hand-container').html(new HandView({
      collection: this.model.get('dealerHand')
    }).el);
    this.delegateEvents();
    return this;
  };

  return AppView;

})(Backbone.View);
