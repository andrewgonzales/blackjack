// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.App = (function(superClass) {
  extend(App, superClass);

  function App() {
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.initialize = function() {
    var deck;
    this.set('deck', deck = new Deck());
    this.set('playerHand', deck.dealPlayer());
    this.set('dealerHand', deck.dealDealer());
    this.get('playerHand').on('roundOver', (function(_this) {
      return function() {
        _this.removeOldHands(_this.get('playerHand'));
        return _this.removeOldHands(_this.get('dealerHand'));
      };
    })(this));
    this.get('playerHand').on('stand', (function(_this) {
      return function() {
        return _this.dealerPlay();
      };
    })(this));
    return this.get('deck').on('outOfCards', (function(_this) {
      return function() {
        return initialize;
      };
    })(this));
  };

  App.prototype.removeOldHands = function(hand) {
    var cardsInHand;
    while (!(cardsInHand < 1)) {
      cardsInHand = hand.length;
      hand.pop();
    }
    this.dealNewHands(hand);
    return this.trigger('newStuff', this);
  };

  App.prototype.dealNewHands = function(hand) {
    if (hand.isDealer) {
      hand.hit().flip();
    } else {
      hand.hit();
    }
    hand.hit();
    return this.trigger('newStuff', this);
  };

  App.prototype.dealerPlay = function() {
    var ref;
    while (!(this.get('dealerHand').scores()[0] >= 17)) {
      this.get('dealerHand').hit();
    }
    if (this.get('playerHand').scores()[0] === this.get('dealerHand').scores()[0]) {
      alert('Push');
    } else if ((this.get('playerHand').scores()[0] < (ref = this.get('dealerHand').scores()[0]) && ref < 22)) {
      alert('Dealer wins');
    } else {
      alert('You win!');
    }
    this.removeOldHands(this.get('playerHand'));
    this.removeOldHands(this.get('dealerHand'));
    return this.trigger('newStuff', this);
  };

  return App;

})(Backbone.Model);
